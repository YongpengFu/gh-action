# This is a basic workflow to help you get started with Actions

name: first workflow

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container:
      # The Docker image to use for the job
      image: python:3
      # Optional: Set the working directory inside the container
      options: --workdir /usr/src/app

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get code
        uses: actions/checkout@v4
      - name: List files in the repo
        run: ls -al
      # install Python
      # - name: Install Python
      #   uses: actions/setup-python@v5.6.0
      #   with:
      #     # Version range or exact version of Python or PyPy to use, using SemVer's version range syntax. Reads from .python-version if unset.
      #     python-version: 3.12
      - name: install package
        run: |
          # pip install -r requirements.txt
          pip install .[dev]
          pip install setuptools wheel
          pip list
      # Runs a single command using the runner's shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runner's shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build.
          echo test, and deploy your project.
      - name: Upload source code for testing
        uses: actions/upload-artifact@v4
        with:
          name: source-code
          path: .  # include everything or just the needed directories
      - name: Set up cache for Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Build the package
        run: |
          python setup.py sdist bdist_wheel
          echo "Build completed successfully."
      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: my-artifact
          path: |
            dist

  test:
    runs-on: ubuntu-latest
    container:
      image: python:3
      options: --workdir /usr/src/app
    needs: build  # this ensures test runs after build completes
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand({ ping: 1 })' | mongo"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example

    steps:
      - name: Download source code from build
        uses: actions/download-artifact@v4
        with:
          name: source-code

      - name: Set up cache for Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      # - name: Install Python
      #   uses: actions/setup-python@v5.6.0
      #   with:
      #     python-version: 3.12

      - name: Install package
        run: |
          pip install .[dev]

      - name: Run unit tests
        run: |
          pytest ./calcpy/tests
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download source code from build
        uses: actions/download-artifact@v4
        with:
          name: my-artifact
      - name: Output artifact files
        run: ls -la

  node-setup:
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.set-node.outputs.node-version }}
      a-randome-value: "random-value"

    steps:
      - name: Set up Node.js
        id: set-node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Show installed Node version
        run: echo "Node version is ${{ steps.set-node.outputs.node-version }}"
    
  use-node:
    runs-on: ubuntu-latest
    needs: node-setup

    steps:
      - name: Show node version from previous job
        run: | 
          echo "Node version from job ${{ needs.node-setup.outputs.node-version }}"
      - name: Show random value from previous job
        run: |
          echo "Random value from job ${{ needs.node-setup.outputs.a-randome-value }}"